<div class="profile-container">
  <div class="profile-header">
    <h1>Your Profile</h1>
    <p>Manage your account settings and preferences</p>
  </div>
  
  <div class="profile-content">
    <!-- Add profile image section -->
    <div class="profile-section">
      <h2><i class="fas fa-image"></i> Profile Picture</h2>
      <div class="profile-image-container">
        <div class="profile-image-wrapper">
          <div class="profile-image" id="profileImageDisplay">
            <% if (user.profile_image) { %>
              <img src="<%= user.profile_image %>" alt="Profile Image">
            <% } else { %>
              <i class="fas fa-user"></i>
            <% } %>
          </div>
        </div>
        <div class="profile-image-upload">
          <h3>Upload new profile picture</h3>
          <p>Upload a photo to personalize your account</p>
          <form id="profileImageForm" enctype="multipart/form-data">
            <div class="upload-btn-wrapper">
              <button class="btn btn-outline" type="button" id="selectImageBtn">
                <i class="fas fa-upload"></i> Select Image
              </button>
              <input type="file" name="profileImage" id="profileImageInput" accept="image/jpeg,image/jpg,image/png,image/webp">
            </div>
            <div id="imagePreviewContainer" class="image-preview-container" style="display: none;">
              <img id="imagePreview" src="#" alt="Image Preview">
              <div class="preview-actions">
                <button type="button" class="btn btn-danger btn-sm" id="cancelUpload">
                  <i class="fas fa-times"></i> Cancel
                </button>
                <button type="submit" class="btn btn-primary btn-sm" id="uploadImage">
                  <i class="fas fa-check"></i> Upload
                </button>
              </div>
            </div>
          </form>
          <div class="upload-requirements">
            <p><small>* Accepted formats: JPEG, PNG, WebP</small></p>
            <p><small>* Maximum file size: 5MB</small></p>
            <p><small>* Image will be resized to 300x300 pixels</small></p>
          </div>
        </div>
      </div>
    </div>
    
    <div class="profile-section">
      <h2><i class="fas fa-user-circle"></i> Account Information</h2>
      <div class="profile-info">
        <div class="info-group">
          <label>Name</label>
          <p class="info-value"><%= user.name %></p>
        </div>
        
        <div class="info-group">
          <label>Username</label>
          <p class="info-value"><%= user.username %></p>
        </div>
        
        <div class="info-group">
          <label>Role</label>
          <p><span class="role-badge <%= user.role %>"><%= user.role.charAt(0).toUpperCase() + user.role.slice(1) %></span></p>
        </div>
      </div>
    </div>
    
    <div class="profile-section">
      <h2><i class="fas fa-key"></i> Update Password</h2>
      <form class="profile-form" id="passwordForm">
        <div class="form-row">
          <div class="form-group">
            <label for="currentPassword">Current Password</label>
            <div class="password-input-group">
              <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
              <button type="button" class="password-toggle" data-target="currentPassword">
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="newPassword">New Password</label>
            <div class="password-input-group">
              <input type="password" id="newPassword" name="newPassword" class="form-control" required>
              <button type="button" class="password-toggle" data-target="newPassword">
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </div>
          
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <div class="password-input-group">
              <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
              <button type="button" class="password-toggle" data-target="confirmPassword">
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </div>
        </div>
        
        <div class="form-actions">
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Update Password
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
.profile-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

.profile-header {
  margin-bottom: 2rem;
  border-bottom: 2px solid #e9ecef;
  padding-bottom: 1rem;
}

.profile-header h1 {
  font-size: 2rem;
  margin-bottom: 0.5rem;
  color: #333;
  font-weight: 600;
}

.profile-header p {
  color: #495057;
  font-size: 1.1rem;
}

.profile-section {
  background: white;
  border-radius: 8px;
  padding: 1.8rem;
  margin-bottom: 2rem;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  border: 1px solid #e9ecef;
}

.profile-section h2 {
  font-size: 1.5rem;
  margin-bottom: 1.5rem;
  color: #333;
  font-weight: 600;
  border-bottom: 1px solid #e9ecef;
  padding-bottom: 0.8rem;
}

.profile-section h2 i {
  margin-right: 0.5rem;
  color: var(--primary-color);
}

.profile-info {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1.5rem;
}

.info-group {
  margin-bottom: 1rem;
}

.info-group label {
  font-weight: 600;
  color: #495057;
  display: block;
  margin-bottom: 0.5rem;
  font-size: 0.95rem;
}

.info-group p {
  font-size: 1.2rem;
  color: #212529;
  margin: 0;
}

.info-value {
  font-weight: 500;
}

.role-badge {
  display: inline-block;
  padding: 0.35rem 1rem;
  border-radius: 30px;
  font-size: 1rem;
  font-weight: 600;
  letter-spacing: 0.5px;
}

.role-badge.admin {
  background-color: #7e3bcc;
  color: white;
}

.role-badge.user {
  background-color: #2575fc;
  color: white;
}

.profile-form .form-row {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.profile-form .form-group {
  margin-bottom: 1.5rem;
}

.profile-form label {
  font-weight: 600;
  margin-bottom: 0.5rem;
  display: block;
  color: #495057;
  font-size: 0.95rem;
}

.profile-form .form-control {
  width: 100%;
  padding: 0.85rem 1rem;
  font-size: 1.05rem;
  border: 2px solid #ced4da;
  border-radius: 6px;
  transition: all 0.3s;
  color: #212529;
}

.profile-form .form-control:focus {
  border-color: var(--primary-color);
  outline: none;
  box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.2);
}

.password-input-group {
  position: relative;
}

.password-toggle {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: #6c757d;
  cursor: pointer;
  padding: 5px;
}

.password-toggle:hover {
  color: #495057;
}

.form-actions {
  margin-top: 2rem;
  text-align: right;
}

.btn {
  display: inline-block;
  padding: 0.8rem 1.5rem;
  font-size: 1rem;
  font-weight: 600;
  text-align: center;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s;
  border: none;
}

.btn-primary {
  background: var(--primary-color);
  background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
  color: white;
}

.btn-primary:hover {
  box-shadow: 0 5px 15px rgba(106, 17, 203, 0.4);
  transform: translateY(-2px);
}

.btn i {
  margin-right: 0.5rem;
}

/* Profile Image Styling */
.profile-image-container {
  display: flex;
  align-items: flex-start;
  gap: 2rem;
  flex-wrap: wrap;
}

.profile-image-wrapper {
  flex: 0 0 200px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.profile-image {
  width: 200px;
  height: 200px;
  border-radius: 50%;
  overflow: hidden;
  background-color: #e9ecef;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 3px solid var(--primary-color);
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.profile-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.profile-image i {
  font-size: 120px;
  color: #adb5bd;
}

.profile-image-upload {
  flex: 1;
  min-width: 300px;
}

.profile-image-upload h3 {
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
  color: #333;
  font-weight: 600;
}

.profile-image-upload p {
  margin-bottom: 1rem;
  color: #6c757d;
}

.upload-btn-wrapper {
  position: relative;
  overflow: hidden;
  display: inline-block;
  margin-bottom: 1rem;
}

.upload-btn-wrapper input[type=file] {
  position: absolute;
  left: 0;
  top: 0;
  opacity: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
}

.btn-outline {
  background: transparent;
  border: 2px solid var(--primary-color);
  color: var(--primary-color);
  padding: 0.65rem 1.5rem;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
}

.btn-outline:hover {
  background: var(--primary-color);
  color: white;
}

.image-preview-container {
  margin-top: 1rem;
  width: 100%;
  max-width: 300px;
}

.image-preview-container img {
  width: 100%;
  height: auto;
  border-radius: 8px;
  border: 1px solid #ced4da;
}

.preview-actions {
  display: flex;
  gap: 0.5rem;
  margin-top: 0.5rem;
  justify-content: flex-end;
}

.btn-sm {
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
}

.btn-danger {
  background-color: #dc3545;
  border-color: #dc3545;
  color: #fff;
}

.btn-danger:hover {
  background-color: #c82333;
  border-color: #bd2130;
}

.upload-requirements {
  margin-top: 1rem;
}

.upload-requirements p {
  margin-bottom: 0.25rem;
  color: #6c757d;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const passwordForm = document.getElementById('passwordForm');
  const passwordToggles = document.querySelectorAll('.password-toggle');
  
  // Password toggle functionality
  passwordToggles.forEach(toggle => {
    toggle.addEventListener('click', function() {
      const targetId = this.getAttribute('data-target');
      const passwordField = document.getElementById(targetId);
      
      if (passwordField) {
        const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordField.setAttribute('type', type);
        
        // Toggle the eye icon
        this.querySelector('i').classList.toggle('fa-eye');
        this.querySelector('i').classList.toggle('fa-eye-slash');
      }
    });
  });
  
  // Form submission
  if (passwordForm) {
    passwordForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const currentPassword = document.getElementById('currentPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      
      // Basic client-side validation with better feedback
      if (newPassword !== confirmPassword) {
        // Create a more user-friendly alert
        const alertElement = document.createElement('div');
        alertElement.className = 'alert alert-danger';
        alertElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> New passwords do not match!';
        
        // Insert at the top of the form
        passwordForm.insertBefore(alertElement, passwordForm.firstChild);
        
        // Remove after 5 seconds
        setTimeout(() => {
          alertElement.remove();
        }, 5000);
        return;
      }
      
      // Success feedback (in a real app, this would be after server validation)
      const successElement = document.createElement('div');
      successElement.className = 'alert alert-success';
      successElement.innerHTML = '<i class="fas fa-check-circle"></i> Password updated successfully!';
      
      // Insert at the top of the form
      passwordForm.insertBefore(successElement, passwordForm.firstChild);
      
      // Remove after 5 seconds
      setTimeout(() => {
        successElement.remove();
      }, 5000);
      
      // Clear the form
      passwordForm.reset();
    });
  }
});

// Profile Image Upload Functionality
document.addEventListener('DOMContentLoaded', function() {
  const profileImageInput = document.getElementById('profileImageInput');
  const imagePreview = document.getElementById('imagePreview');
  const imagePreviewContainer = document.getElementById('imagePreviewContainer');
  const selectImageBtn = document.getElementById('selectImageBtn');
  const cancelUpload = document.getElementById('cancelUpload');
  const profileImageForm = document.getElementById('profileImageForm');
  const profileImageDisplay = document.getElementById('profileImageDisplay');
  
  // Trigger file input when the select button is clicked
  selectImageBtn.addEventListener('click', function() {
    profileImageInput.click();
  });
  
  // Show preview when an image is selected
  profileImageInput.addEventListener('change', function() {
    if (this.files && this.files[0]) {
      const file = this.files[0];
      
      // Validate file size (5MB max)
      if (file.size > 5 * 1024 * 1024) {
        alert('File size exceeds 5MB limit. Please select a smaller image.');
        this.value = '';
        return;
      }
      
      // Validate file type
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
      if (!allowedTypes.includes(file.type)) {
        alert('Invalid file type. Please select a JPEG, JPG, PNG, or WebP image.');
        this.value = '';
        return;
      }
      
      // Display image preview
      const reader = new FileReader();
      reader.onload = function(e) {
        imagePreview.src = e.target.result;
        imagePreviewContainer.style.display = 'block';
      };
      reader.readAsDataURL(file);
    }
  });
  
  // Cancel upload button
  cancelUpload.addEventListener('click', function() {
    profileImageInput.value = '';
    imagePreviewContainer.style.display = 'none';
  });
  
  // Handle image upload form submission
  profileImageForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    if (!profileImageInput.files || !profileImageInput.files[0]) {
      alert('Please select an image to upload.');
      return;
    }
    
    const formData = new FormData(profileImageForm);
    
    // Show loading state
    const uploadBtn = document.getElementById('uploadImage');
    const originalBtnText = uploadBtn.innerHTML;
    uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';
    uploadBtn.disabled = true;
    
    fetch('/api/profile/upload-image', {
      method: 'POST',
      body: formData
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Error uploading image');
      }
      return response.json();
    })
    .then(data => {
      // Update profile image display
      const profileImg = document.createElement('img');
      profileImg.src = data.imagePath;
      profileImg.alt = 'Profile Image';
      
      // Clear any existing content and add the new image
      profileImageDisplay.innerHTML = '';
      profileImageDisplay.appendChild(profileImg);
      
      // Reset the form
      profileImageInput.value = '';
      imagePreviewContainer.style.display = 'none';
      
      // Show success message
      alert('Profile image uploaded successfully!');
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Failed to upload image. Please try again.');
    })
    .finally(() => {
      // Reset button state
      uploadBtn.innerHTML = originalBtnText;
      uploadBtn.disabled = false;
    });
  });
  
  // Toggle password visibility for all password fields
  document.querySelectorAll('.password-toggle').forEach(button => {
    button.addEventListener('click', function() {
      const targetId = this.getAttribute('data-target');
      const passwordInput = document.getElementById(targetId);
      
      if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        this.innerHTML = '<i class="fas fa-eye-slash"></i>';
      } else {
        passwordInput.type = 'password';
        this.innerHTML = '<i class="fas fa-eye"></i>';
      }
    });
  });
});
</script>

<style>
/* Additional styles for alerts */
.alert {
  padding: 1rem;
  border-radius: 6px;
  margin-bottom: 1.5rem;
  position: relative;
  font-weight: 500;
}

.alert i {
  margin-right: 0.5rem;
}

.alert-danger {
  background-color: #f8d7da;
  border: 1px solid #f5c6cb;
  color: #721c24;
}

.alert-success {
  background-color: #d4edda;
  border: 1px solid #c3e6cb;
  color: #155724;
}
</style>